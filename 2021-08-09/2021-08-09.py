# N, M을 공백으로 구분하여 입력받기 (ㅇ)
n, m = map(int, input().split())

# 방문한 위치를 저장하기 위한 맵을 생성하여 0으로 초기화 (ㅇ)
d = [[0] * m for _ in range(n)]
# 현재 캐릭터의 X 좌표, Y 좌표, 방향을 입력받기
x, y, direction = map(int, input().split())
d[x][y] = 1 # 현재 좌표 방문 처리

# 전채 맵 정보를 입력받기
array = []
for i in range(n):
    array.append(list(map(int, input().split())))

# 북, 동, 남, 서 방향 정의
dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

# 왼쪽으로 회전
def turn_left(): #
    global direction
    direction -= 1
    if direction == -1:
        direction = 3
# 시뮬레이션 시작
count = 1
turn_time = 0
while True:
    # 왼쪽으로 회전
    turn_left()
    nx = x + dx[direction]
    ny = y + dy[direction]
    # 회전한 이후 정면에 가보지 않은 칸이 존재하는 경우 이동
    if d[nx][ny] == 0 and array[nx][ny] == 0:
        d[nx][ny] = 1
        x = nx
        y = ny
        count += 1
        turn_time = 0
        continue
    # 회전한 이후 정면에 가보지 않은 칸이 없거나 바다인 경우
    else:
        turn_time += 1
    # 네 방향 모두 갈 수 없는 경우
    if turn_time == 4:
        nx = x - dx[direction]
        ny = y - dy[direction]
        # 뒤로 갈 수 있다면 이동하기
        if array[nx][ny] == 0:
            x = nx
            y = ny
        # 뒤가 바다로 막혀있는 경우
        else:
            break
        turn_time = 0

# 정답 출력
print(count)

'''
오오 이번문제는 생각보다 단순했었다.
지레 겁먹고 너무 어렵게 생각한건 아닌지 싶지만 모든 공부가 답을 보면 쉬워지듯이 절대 쉽지 않다.
이번 CHAPTER 4를 하면서 배운건 2개의 배열을 통해 하나의 값을 잘 표현하는게 인상적이었다.
비록 직관적 접근이 아닌 논리적사고로 표현된 거였지만 이런 표현들을 하나하나 잘 배워가서 직관적으로 쓸수 있게 만들어야겠다.
코드를 천천히 읽어보니 문제와 코드가 이해가 되었고 이 문제에서 쓰인것을 잘 분석해보자
1. 배열을 통한 방위표시와 이동경로의 옳고 그름의 판단 표현 ( 응용표현 )
2. map(int, input().split())와 list(map(int, input().split()))를 잘 이해하도록 ( 저번에 구다형이 설명해주었는데 까먹음..; )
3. def를 이용해 함수를 만드는것을 또 배웠다 ( 기본적인 문법 )
'''

'''
탐색 : 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정
자료구조 : 데이터를 표현하고 관리하고 처리하기 위한 구조
=> 스택(삽입) // 큐(삭제) : 자료구조의 기초 개념

스택 : 선입후출구조 또는 후입선출구조 (똑같은말 : 1등으로 들어간애가 제일 늦게 처리된다는 말)

큐 : 선입선출구조 ( : 나중에 온 사람일수록 나중에 들어감. 공정한 자료구조라고도 불림 )
=> queue.reverse() : 출력시에 역순으로 바꾸는 코드

재귀 함수 : 자기자신을 다시 호출하는 함수
=> 종료조건 : if문을 이용하여 꼭 종료조건을 구현해주어야 한다( 무한호출을 막기위해 )
=> 장점 : 재귀함수의 코드가 반복문으로 표현됬을 코드보다 간결해짐.


==> 앞으로 나올 문제는 스택, 큐, 재귀함수를 이용하는 문제가 나올것으로 예상된다. 
==> 뒤에 탐색알고리즘 DFS/BFS에 대해서 또 이론 공부를 하는것 같다
==> 3부터 문제에 들어가는데 잘 공부하고 응용해볼수 있었으면 좋겠다.
'''