'''
# 다이나믹 프로그래밍 #
메모리 공간을 약간 더 사용해서 연산 속도를 비약적으로 증가시킬 수 있는 대표적인 방법 ( 동적 계획법 )

대표적인 예>
 - 피보나치 수열 : 이전 두 항의 합을 현재의 항으로 설정하는 특징이 있는 수열.

프로그래밍에서는 이러한 수열을 배열이나 리스트로 표현할 수 있다.

# 피보나치 함수 소스코드
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x - 1) + fibo(x - 2)

print(fibo(4))

이처럼 피보나치 수열의 점화식을 재귀 함수를 사용해 만들 수는 있지만, 단순히 매번 계산하도록 하면 문제를 효율적으로 해결할 수 없다.
이러한 문제는 다이나믹 프로그래밍을 사용하면 효율적으로 해결할 수 있다.
다만 항상 다이나믹 프로그래밍을 사용할 수는 없으며, 다음 조건을 만족할 때 사용할 수 있다.
1. 큰 문제를 작은 문제로 나눌 수 있다.
2. 작은 문제에서 구한 정답은 그것을 포함하는 큰 문제에서도 동일하다.

피보나치 수열은 이러한 조건을 만족하는 대표 문제이다.
이 문제를 메모이제이션 기법을 사용해서 해결해보자.
메모이제이션은 다이나믹 프로그래밍을 구현하는 방법 중 한 종류로,
한 번 구한 결과를 메모리 공간에 메모해두고 같은 식을 다시 호출하면 메모한 결과를 그대로 가져오는 기법을 의미한다.
메모이제이션은 값을 저장하는 방법이므로 캐싱이라고도 한다.

# 피보나치 수열 소스코드(재귀적)
d = [0] * 100

def fibo(x):
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    
    d[x] = fibo(x - 1) + fibo(x - 2)
    return d[x]

print(fibo(99))

정리하자면 다이나믹 프로그래밍이란 큰 문제를 작게 나누고, 같은 문제라면 한 번씩만 풀어 문제를 효율적으로 해결하는 알고리즘 기법이다.
사실 큰 문제를 작게 나누는 방법은 퀵 정렬에서도 소개된적이 있다.
퀵 정렬은 정렬을 수행할 때 정렬할 리스트를 분할하며 전체적으로 정렬이 될 수 있도록 한다.
이는 분할 정복 알고리즘으로 분류된다. 다이나믹 프로그래밍과 분할 정복의 차이점은 다이나믹 프로그래밍은 문제들이 서로 영향을 미치고 있다는 점이다.
ex)
한 번 기준 원소가 자리를 변경해서 자리를 잡게되면 그 기준 원소의 위치는 더 이상 바뀌지 않고 그 피버값을 다시 처리하는 부분 문제는 존재하지 않는다.
반면에 다이나믹 프로그래밍은 한 번 해결했던 문제를 다시금 해결한다는 점이 특징이다.
그렇기 때문에 이미 해결된 부분 문제에 대한 답을 저장해 놓고, 이 문제는 이미 해결이 됐던 것이니까 다시 해결할 필요가 없다고 반환하는 것이다.

# 호출되는 함수 확인
d = [0] * 100

def pibo(x):
    print('f(' + str(x) + ')', end = ' ')
    if x == 1 or x == 2:
        return 1
    if d[x] != 0:
        return d[x]
    d[x] = pibo(x - 1) + pibo(x - 2)
    return d[x]

pibo(6)
==> f(6) f(5) f(4) f(3) f(2) f(1) f(2) f(3) f(4)
'''